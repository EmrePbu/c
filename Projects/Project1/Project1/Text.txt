//// Character Input and Output 

	//int c;
	//while ((c = getchar()) != EOF)
	//	putchar(c);

	//long nc;
	//nc = 0;
	//while (getchar() != EOF)
	//	++nc;
	//printf("%ld\n", nc);

//// CHARACTER COUNTING
	//double nc;
	//for (nc = 0; getchar() != EOF; ++nc)
	//	; // null statement
	//printf("%.0f\n", nc);

	//// LINE COUNTING
	//int c, nl;
	//nl = 0;
	//while ((c = getchar()) != EOF)
	//{
	//	if (c == '\n')
	//	{
	//		++nl;
	//	}
	//}
	//printf("%d\n", nl);

//// WORD COUNTING
	//int c, nl, nw, nc, state;
	//state = OUT;
	//nl = nw = nc = 0;
	//while ((c = getchar()) != EOF)
	//{
	//	++nc;
	//	if (c == ' \n')
	//	{
	//		++nl;
	//	}
	//	if (c == ' ' || c == '\n' || c == '\t')
	//	{
	//		state = OUT;
	//	}
	//	else if (state == OUT)
	//	{
	//		state = IN;
	//		++nw;
	//	}
	//}
	//printf("%d %d %d \n", nl, nw, nc);

//// ARRAYS
	//// Count digits, white space, others
	//int c, i, n_white, n_other;
	//int n_digit[SIZE];
	//n_white = n_other = 0;
	//for (i = 0; i < SIZE; ++i)
	//{
	//	n_digit[i] = 0;
	//}
	//while ((c = getchar()) != EOF)
	//{
	//	if (c >= '0' && c <= '9')
	//	{
	//		++n_digit[c - '0'];
	//	}
	//	else if (c == ' ' || c == '\n' || c == '\t')
	//	{
	//		++n_white;
	//	}
	//	else
	//	{
	//		++n_other;
	//	}
	//}
	//printf("digits [0...9] =");
	//for (i = 0; i < SIZE; ++i)
	//{
	//	printf(" %d", n_digit[i]);
	//}
	//printf(", white space = %d, other = %d\n", n_white, n_other);

//// FUNCTION
	//int power(int base, int n)
	//{
	//	int i, p;
	//	p = 1;
	//	for (i = 1; i <= n; ++i)
	//		p *= base;
	//	return p;
	//}
	//
	////// (old-style version)
	////power(base, n)
	////int base, n;
	////{
	////	int i, p;
	////	p = 1;
	////	for (i = 1; i <= n; ++i)
	////		p = p * base;
	////	return p;
	////}
	//
	//
	//void main(void)
	//{
	//	int i;
	//	printf("i\t2^i\t(-3)^i\n");
	//	printf("--------------------\n");
	//	for (i = 0; i < 10; ++i)
	//		printf("%d\t%d\t%d\n", i, power(2, i), power(-3, i));
	//}


//#define		MAXLINE		1000
//
//#include <stdio.h>
//
//int getline(char line[], int maxline);
//void copy(char to[], char from[]);
//
//void main(void)
//{
//	int len;				// Currrent line length
//	int max;				// Maximum length seen so far
//	char line[MAXLINE];		// Current input line
//	char longest[MAXLINE];	// Longest line saved here
//
//	max = 0;
//	while ((len = getline(line, MAXLINE)) > 0)
//		if (len > max)
//		{
//			max = len;
//			copy(longest, line);
//		}
//	if (max > 0)
//		printf("%s", longest);
//	return 0;
//}
//
//int getline(char line[], int maxline)
//{
//	int c, i;
//	for (i = 0; i < maxline - 1 && (c = getchar()) != EOF && c != '\n'; ++i)
//		line[i] = c;
//	if (c == '\n')
//	{
//		line[i] = c;
//		++i;
//	}
//	line[i] = '\0';
//	return i;
//}
//
//void copy(char to[], char from[])
//{
//	int i;
//	i = 0;
//	while ((to[i] = from[i]) != '\0')
//		++i;
//
//}


// #a, a##b
	//#define		i_print(x)		printf(#x " = %d\n", x, x)
	//#define		c_print(c)		printf(#c " = %c\n", c, c)
	//
	//#define		uni(a,b)		a##b
	//
	//#define		MAX_FUNC(T)		T getmax_##T(const T *p, int size)	\
	//								{									\
	//									T max = *p;						\
	//									for (int i = 0; i < size; i++)	\
	//										if (p[i] > max)				\
	//											max = p[i];				\
	//									return max;						\
	//								}									\
	//
	//#define		PUBLIC
	//MAX_FUNC(int)
	//MAX_FUNC(char)
	//
	//
	//PUBLIC int emre()
	//{
	//	return 0;
	//}
	//
	//void main(void)
	//{
	//	int a = 10;
	//	int b = 7;
	//	i_print(a * b + b * a);
	//
	//	int counter = 0;
	//	uni(co, unter) = 20;
	//	i_print(counter);
	//
	//	int arr[4] = { 10, 20, 30, 1 };
	//	i_print(getmax_int(arr, 4));
	//
	//	char arr2[4] = { 'a', 'm', 'e', 'R' };
	//	c_print(getmax_char(arr2, 4));
	//
	//
	//	// boþ bir define tanýmladýðýnda tanýmlanan makroyu siler.
	//	// derleyici int number = 1; olarak görecek.
	//	PUBLIC int number = 1;
	//
	//}